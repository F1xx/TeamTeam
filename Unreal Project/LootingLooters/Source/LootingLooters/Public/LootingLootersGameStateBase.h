// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameStateBase.h"
#include "LootingLootersGameStateBase.generated.h"

/**
 * 
 */
UCLASS()
class LOOTINGLOOTERS_API ALootingLootersGameStateBase : public AGameStateBase
{
	GENERATED_BODY()
		ALootingLootersGameStateBase();
	
public:

	//On begin runtime, generate the level and its elements.
	virtual void BeginPlay() override;

	virtual void Tick( float DeltaSeconds ) override;

	//Server call : Spawn a random level.
	UFUNCTION(Server, Reliable, WithValidation)
		void Server_GenerateRandomRoomLayout();

	//Server call : Populate the level with assets and doors.
	UFUNCTION(Server, Reliable, WithValidation)
		void Server_PopulateRoomSockets();

	//Server call : Connect the level's doors together.
	UFUNCTION(Server, Reliable, WithValidation)
		void Server_GenerateRandomRoomConnections();

	//Server call : Spawn fresh loot in rooms.
	UFUNCTION(Server, Reliable, WithValidation)
		void Server_GenerateLoot();

	//Copies the room list.
	void GetRoomArray(TArray<class ARoomActorBase*>& RoomArray);

	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = Materials, Replicated)
		class UMaterialInterface* TeamOneMaterials;

	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = Materials, Replicated)
		class UMaterialInterface* TeamTwoMaterials;

	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = Materials, Replicated)
		class UMaterialInterface* TeamThreeMaterials;

	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = Materials, Replicated)
		class UMaterialInterface* TeamFourMaterials;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = Gameplay, Replicated)
		bool PlayerOneLoggedIn;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = Gameplay, Replicated)
		bool PlayerTwoLoggedIn;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = Gameplay, Replicated)
		bool PlayerThreeLoggedIn;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = Gameplay, Replicated)
		bool PlayerFourLoggedIn;
	
	UPROPERTY(Replicated)
		FTimerHandle MatchTimer;

	UPROPERTY(Replicated)
		FTimerHandle EndBufferTime;

	UPROPERTY(EditAnywhere, Replicated)
		float MatchLength = 60.0f;

	UPROPERTY(EditAnywhere, Replicated)
		float BufferLength = 10.0f;

	UPROPERTY(BlueprintReadOnly, Replicated)
		bool MatchEnding = false;

	//used for a HUD based Countdown timer
	UPROPERTY(Replicated, BlueprintReadOnly)
		float MatchCountDown = MatchLength;

	//Called when the MatchTimer Ends. Creates another timer that when complete Actually closes the game
	UFUNCTION(Server, Reliable, WithValidation)
		void Server_StartEndGame();

	UFUNCTION(Server, Reliable, WithValidation)
		void Server_EndGame();
protected:

	//All rooms generated by the random generation process
	UPROPERTY(Replicated, VisibleInstanceOnly, Category = "Rooms")
		TArray<class ARoomActorBase*> Rooms;

};
